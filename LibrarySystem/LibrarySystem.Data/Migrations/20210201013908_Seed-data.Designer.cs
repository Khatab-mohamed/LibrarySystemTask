// <auto-generated />
using System;
using LibrarySystem.Data.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace LibrarySystem.Data.Migrations
{
    [DbContext(typeof(LibraryDbContext))]
    [Migration("20210201013908_Seed-data")]
    partial class Seeddata
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("LibrarySystem.Domain.Entities.Author", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("DateOfBirth")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.ToTable("Authors");

                    b.HasData(
                        new
                        {
                            Id = new Guid("c123b30a-bb3b-4415-9208-feb89a70fd28"),
                            DateOfBirth = new DateTimeOffset(new DateTime(1964, 2, 10, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, -8, 0, 0, 0)),
                            FirstName = "William",
                            LastName = "Shakespeare"
                        },
                        new
                        {
                            Id = new Guid("19d3c6be-ddf5-4aa6-8448-30cd55a6ac0a"),
                            DateOfBirth = new DateTimeOffset(new DateTime(1973, 10, 12, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, -7, 0, 0, 0)),
                            FirstName = "John",
                            LastName = "Doe"
                        },
                        new
                        {
                            Id = new Guid("296ae62d-959d-42c4-ba9f-5b2713b03d5e"),
                            DateOfBirth = new DateTimeOffset(new DateTime(1890, 9, 15, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, -7, 0, 0, 0)),
                            FirstName = "Agatha",
                            LastName = "Christie"
                        });
                });

            modelBuilder.Entity("LibrarySystem.Domain.Entities.Book", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AuthorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MainCategory")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SubCategory")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.ToTable("Books");

                    b.HasData(
                        new
                        {
                            Id = new Guid("f9787b4e-8ee5-4b6a-b19c-f8bba5624d10"),
                            AuthorId = new Guid("c123b30a-bb3b-4415-9208-feb89a70fd28"),
                            Description = "In this guide, I’ll walk you through how to write a book .....",
                            MainCategory = "Poetry",
                            Name = "Hamlet",
                            SubCategory = "novels"
                        },
                        new
                        {
                            Id = new Guid("633212b6-f6de-4c98-a6ec-16e742643ef2"),
                            AuthorId = new Guid("19d3c6be-ddf5-4aa6-8448-30cd55a6ac0a"),
                            Description = "In this guide, I’ll walk you through how to write a book .....",
                            MainCategory = "History",
                            Name = "Hamlet",
                            SubCategory = "Movies"
                        },
                        new
                        {
                            Id = new Guid("790874ac-3910-4c4b-9287-a50a2b8f27b6"),
                            AuthorId = new Guid("296ae62d-959d-42c4-ba9f-5b2713b03d5e"),
                            Description = "In this guide, I’ll walk you through how to write a book .....",
                            MainCategory = "novels",
                            Name = "Hamlet",
                            SubCategory = "Police novels"
                        });
                });

            modelBuilder.Entity("LibrarySystem.Domain.Entities.Book", b =>
                {
                    b.HasOne("LibrarySystem.Domain.Entities.Author", "Author")
                        .WithMany("Books")
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
